// // src/anomaly-detector/anomaly-detector.service.ts
// import { Injectable } from '@nestjs/common';

// @Injectable()
// export class AnomalyService {
//   detectAnomalies(messages: string[]) {
//     throw new Error('Method not implemented.');
//   }
//   trainAutoencoder(messages: string[]) {
//     throw new Error('Method not implemented.');
//   }
//   cacheMessages(messages: string[]) {
//     throw new Error('Method not implemented.');
//   }
//   // –ï–º–æ–¥–∑—ñ-–¥–µ—Ç–µ–∫—Ç–æ—Ä
//   detectEmojiAnomaly(message: string): boolean {
//     const emojiRegex = /[\u{1F300}-\u{1F6FF}]/gu;
//     const emojis = message.match(emojiRegex);
//     return emojis ? emojis.length > 5 : false;
//   }

//   // –ü—Ä–∏–º—ñ—Ç–∏–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≥—Ä–∞–º–∞—Ç–∏—á–Ω—ñ –∞–Ω–æ–º–∞–ª—ñ—ó (–º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏)
//   detectGrammarAnomaly(message: string): boolean {
//     const words = message.trim().split(/\s+/);
//     const averageWordLength =
//       words.reduce((sum, word) => sum + word.length, 0) / words.length;
//     return averageWordLength < 3 || averageWordLength > 10; // –ø—Ä–æ—Å—Ç–µ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è
//   }

//   // –ü—Ä–∏–º—ñ—Ç–∏–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π —Ç–æ–Ω (–µ–º–æ—Ü—ñ–π–Ω—ñ —Å–ª–æ–≤–∞)
//   detectToneAnomaly(message: string): boolean {
//     const negativeWords = [
//       '–¥—É—Ä–µ–Ω—å',
//       '—Ç—É–ø–æ',
//       '–Ω–µ–Ω–∞–≤–∏–¥–∂—É',
//       '–∫–ª—ñ–∫–Ω–∏',
//       '—Å–º–µ—Ä—Ç—å',
//       '–ª–∞–π–Ω–æ',
//       '—Ç—É–ø–∞ —Å–∏—Å—Ç–µ–º–∞',
//     ];
//     return negativeWords.some((word) => message.toLowerCase().includes(word));
//   }

//   // –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
//   isAnomalous(message: string): boolean {
//     return (
//       this.detectEmojiAnomaly(message) ||
//       this.detectGrammarAnomaly(message) ||
//       this.detectToneAnomaly(message)
//     );
//   }
// }

//attempt 2
// import { Injectable, Logger } from '@nestjs/common';
// import axios from 'axios';

// @Injectable()
// export class AnomalyService {
//   detectAnomalies(messages: string[]) {
//     throw new Error('Method not implemented.');
//   }
//   trainAutoencoder(messages: string[]) {
//     throw new Error('Method not implemented.');
//   }
//   cacheMessages(messages: string[]) {
//     throw new Error('Method not implemented.');
//   }
//   private readonly apiKey = process.env.ANOMALY_KEY;
//   private readonly logger = new Logger(AnomalyService.name);
//   private readonly apiUrl =
//     'https://commentanalyzer.googleapis.com/v1alpha1/comments:analyze';

//   async isAnomalous(message: string): Promise<boolean> {
//     try {
//       const requestBody = {
//         comment: { text: message },
//         languages: ['en'],
//         requestedAttributes: {
//           TOXICITY: {},
//           SEVERE_TOXICITY: {},
//           PROFANITY: {},
//           THREAT: {},
//           INSULT: {},
//         },
//       };

//       const response = await axios.post(
//         `${this.apiUrl}?key=${this.apiKey}`,
//         requestBody,
//       );

//       const scores = response.data.attributeScores;

//       // –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ—Ü—ñ–Ω–æ–∫
//       this.logger.debug('Perspective scores: ' + JSON.stringify(scores));

//       // –Ø–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä > 0.8, –≤–≤–∞–∂–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—å–Ω–∏–º
//       const isAnomaly = Object.values(scores).some((attr: any) => {
//         const score = attr.summaryScore.value;
//         return score >= 0.4;
//       });

//       return isAnomaly;
//     } catch (error) {
//       this.logger.error('Perspective API error:', error.message);
//       return false; // –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø–æ–º–∏–ª–∫–∏ ‚Äî –Ω–µ –±–ª–æ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
//     }
//   }
// }

///3 attempt
import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import axios from 'axios';

@Injectable()
export class AnomalyService {
  private readonly apiKey = process.env.ANOMALY_KEY;
  private readonly logger = new Logger(AnomalyService.name);
  private readonly apiUrl =
    'https://commentanalyzer.googleapis.com/v1alpha1/comments:analyze';

  // CRON - –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —â–æ—Ö–≤–∏–ª–∏–Ω–∏
  // @Cron(CronExpression.EVERY_MINUTE)
  async handleCron() {
    this.logger.debug('üïí Cron job running: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...');
    const messages = await this.fetchRecentMessages(); // üëà –ø—ñ–¥–∫–ª—é—á–∏ —Å–≤–æ—é –±–∞–∑—É

    for (const msg of messages) {
      const isAnomaly = await this.isAnomalous(msg.text);
      this.logger.debug(
        `"${msg.text}" ‚Üí ${isAnomaly ? '‚ùå –ê–ù–û–ú–ê–õ–Ü–Ø' : '‚úÖ –Ω–æ—Ä–º'}`,
      );
      // TODO: –º–æ–∂–µ—à —Ç—É—Ç –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —É –ë–î –∞–±–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    }
  }

  // –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ —Ç–≤–æ—î—ó –±–∞–∑–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ MongoDB —á–µ—Ä–µ–∑ MessageModel)
  private async fetchRecentMessages(): Promise<{ text: string }[]> {
    return [
      { text: 'You are completely useless in every meeting.' },
      { text: 'Hello team, great job today!' },
    ];
  }

  async isAnomalous(message: string): Promise<boolean> {
    try {
      const requestBody = {
        comment: { text: message },
        languages: ['en'],
        requestedAttributes: {
          TOXICITY: {},
          SEVERE_TOXICITY: {},
          PROFANITY: {},
          THREAT: {},
          INSULT: {},
        },
      };

      const response = await axios.post(
        `${this.apiUrl}?key=${this.apiKey}`,
        requestBody,
      );

      const scores = response.data.attributeScores;

      this.logger.debug('Perspective scores: ' + JSON.stringify(scores));

      return Object.values(scores).some((attr: any) => {
        const score = attr.summaryScore.value;
        return score >= 0.4;
      });
    } catch (error) {
      this.logger.error('Perspective API error:', error.message);
      return false;
    }
  }

  // –Ü–Ω—à—ñ –º–µ—Ç–æ–¥–∏ –º–æ–∂–Ω–∞ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º–∏
  detectAnomalies(messages: string[]) {
    throw new Error('Method not implemented.');
  }

  trainAutoencoder(messages: string[]) {
    throw new Error('Method not implemented.');
  }

  cacheMessages(messages: string[]) {
    throw new Error('Method not implemented.');
  }
}
