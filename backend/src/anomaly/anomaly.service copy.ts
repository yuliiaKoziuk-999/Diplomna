// import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
// import { Cron, CronExpression } from '@nestjs/schedule';
// import * as fs from 'fs';
// import { execSync } from 'child_process';
// import * as stringSimilarity from 'string-similarity';

// @Injectable()
// export class AnomalyService1 implements OnModuleInit {
//   onModuleInit() {
//     this.logger.log('Running initial model training...');
//     this.handleScheduledTraining();
//   }
//   private readonly logger = new Logger(AnomalyService.name);

//   private cachedMessages: string[] = [];
//   private trainedPatterns: Set<string> = new Set();
//   private loadMessagesFromFile(): string[] {
//     try {
//       const data = fs.readFileSync('src/anomaly/data/messages.json', 'utf8');
//       const parsed = JSON.parse(data);
//       if (!Array.isArray(parsed.messages)) {
//         throw new Error('Invalid messages file format');
//       }
//       return parsed.messages;
//     } catch (error) {
//       this.logger.error('Failed to load messages from file:', error.message);
//       return [];
//     }
//   }

//   // –ö–µ—à—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä
//   cacheMessages(messages: string[]) {
//     if (!Array.isArray(messages)) {
//       throw new Error('Messages must be an array');
//     }
//     this.cachedMessages = messages;
//     this.logger.log(
//       `Cached ${messages.length} messages for scheduled training`,
//     );
//   }

//   // –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ (—Å–ø—Ä–æ—â–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –∑–±–µ—Ä—ñ–≥–∞—î —à–∞–±–ª–æ–Ω–∏)
//   trainAutoencoder(messages: string[]) {
//     if (!Array.isArray(messages)) {
//       throw new Error('Messages must be an array');
//     }
//     this.trainedPatterns = new Set(messages);
//     this.logger.log(`Model trained with ${messages.length} messages`);
//   }

//   // –í–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π (–ø—Ä–æ—Å—Ç–∏–π –ø—ñ–¥—Ö—ñ–¥)
//   detectAnomalies(messages: string[]): number[] {
//     const trained = Array.from(this.trainedPatterns);
//     return messages.map((msg) => {
//       const { bestMatch } = stringSimilarity.findBestMatch(msg, trained);
//       return bestMatch.rating >= 0.8 ? 0 : 1; // –ø–æ—Ä—ñ–≥ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏
//     });
//   }

//   // Cron job: —â–æ—Ö–≤–∏–ª–∏–Ω–∏ —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ messages.json
//   @Cron(CronExpression.EVERY_MINUTE)
//   handleScheduledTraining() {
//     try {
//       // üîÑ 1. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
//       this.logger.log('Generating new messages with faker.js...');
//       execSync('node src/anomaly/data/faker.js'); // —à–ª—è—Ö –¥–æ faker.js

//       // üì• 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –Ω–æ–≤–æ—Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É
//       const messages = this.loadMessagesFromFile();

//       if (messages.length === 0) {
//         this.logger.warn('No messages loaded for training');
//         return;
//       }

//       // ‚úÖ –õ–æ–≥ –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
//       this.logger.log('Example message: ' + messages[0]);

//       // üìö 3. –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
//       this.trainAutoencoder(messages);
//       this.logger.log('Scheduled training completed');
//     } catch (error) {
//       this.logger.error('Scheduled training failed:', error.message);
//     }
//   }
// }
